<?xml version="1.0" encoding="UTF-8" ?><Configuration status="DEBUG">
	<Properties>
		<Property name="LOG_PATTERN">%d{HH:mm:ss.SSSZ} [%t] %-5level %logger{36} - %msg%n</Property>
	</Properties>
	<Appenders>
		<Console name="ConsoleLog" target="SYSTEM_OUT">
			<PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
		</Console>
	</Appenders>

	<Loggers>
		<!-- Application Loggers -->
		<!-- Root 보다 우선 순위가 높습니다. -->
		<!-- SQL Logger -->
		<logger name="java.sql" level="debug" />							<!-- * -->
		<logger name="jdbc.sqlonly">
			<level value="info" />
			<appender-ref ref="console" />									<!-- jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.  -->
		</logger>
		<logger name="jdbc.sqltiming" level="info" /> 						<!-- jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.  -->
		<logger name="jdbc.audit" level="off" additivity="false"/>			<!-- jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.  -->
		<logger name="jdbc.resultset" level="off" additivity="false"/> 		<!-- jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.  -->
		<logger name="jdbc.resultsettable" level="off" additivity="false" /><!-- jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
		<logger name="jdbc.connection" level="off" additivity="false"/>

		<!-- Root Logger -->
		<root level="info">
			<appender-ref ref="console" />
		</root>
	</Loggers>
</Configuration>

